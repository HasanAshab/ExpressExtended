const args = process.argv;
const fs = require('fs');
const crypto = require('crypto');
const componentPaths = require('./register/componentPaths');
const { setEnv } = require('./helpers');
const loadDir = path => {
  if (!fs.existsSync(path)) {
    fs.mkdirSync(path);
  }
}

const getPathFor = (componentName, name) => {
  const componentPath = componentPaths[componentName];
  if(!componentPath){
    throw new Error(`Component ${componentName} not available!`);
  }
  loadDir(componentPath)
  const filepath = `${componentPath}/${name}.js`;
  return filepath;
}

if(/^make:/.test(args[2])){
  const name = args[3];
  const componentName = args[2].split(':')[1];
  const template = fs.readFileSync(`templates/${componentName}`, 'utf-8');
  const content = template.replace(/{{name}}/g, name);
  const filepath = getPathFor(componentName, name);
  fs.writeFileSync(filepath, content, { flag: 'wx' });
  console.log(`\nFile created successfully: [${filepath}]\n`);
}

else if(/^secret:/.test(args[2])){
  const key = args[2].split(':')[1].toUpperCase() + '_SECRET';
  const secret = crypto.randomBytes(32).toString('hex');
  let obj = {};
  obj[key] = secret;
  setEnv(obj);
  console.log(`\nSecret generated: ${secret}\n`);
}
